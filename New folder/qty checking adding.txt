<form method='POST'>
			                				<div class="row">
			                					<div class="col-sm-6">
			                						<label>First Name *</label>
			                						<input type="text" class="form-control" require>
			                					</div><!-- End .col-sm-6 -->

			                					<div class="col-sm-6">
			                						<label>Last Name *</label>
			                						<input type="text" class="form-control" required>
			                					</div><!-- End .col-sm-6 -->
			                				</div><!-- End .row -->

		            						<label>Display Name *</label>
		            						<input type="text" class="form-control" required>
		            						<small class="form-text">This will be how your name will be displayed in the account section and in reviews</small>

		                					<label>Email address *</label>
		        							<input type="email" class="form-control" required>

		            						<label>Current password (leave blank to leave unchanged)</label>
		            						<input type="password" class="form-control">

		            						<label>New password (leave blank to leave unchanged)</label>
		            						<input type="password" class="form-control">

		            						<label>Confirm new password</label>
		            						<input type="password" class="form-control mb-2">

		                					<button type="submit" class="btn btn-outline-primary-2">
			                					<span>SAVE CHANGES</span>
			            						<i class="icon-long-arrow-right"></i>
			                				</button>
			                			</form>
										
										
										
										
=====================================================================================================================================================
account details update
js 
======================================




sign_up_form=document.getElementById('signup_form')

if (sign_up_form){

  //console.log('gets the form')

  addEventListener('submit', (e) => {
    if ((document.getElementById('username-error').textContent === '') &&
(document.getElementById('phone-error').textContent === '') &&
(document.getElementById('email-error').textContent === '') &&
(document.getElementById('password-error').textContent === '') &&
(document.getElementById('password2-error').textContent === '') &&
(document.getElementById('password21-error').textContent === '') &&
(document.getElementById('phone1-error').textContent === '') &&
(document.getElementById('password-2-error').textContent === '') &&
(document.getElementById('password-3-error').textContent === '') 
){
  clear_div('.error-container');
      console.log('No error');

}else{
  e.preventDefault();
  console.log('Error');
}
    // const elements = document.querySelectorAll('.error-container')
    // // Loop through the selected elements
    // clear_div('.error-container')

    
  })
}



//form handling
document.addEventListener('DOMContentLoaded', function () {
  // Function to check if value and some another validation  in the database


  async function checkExists(fieldName, fieldValue) {

      const response = await fetch(`/user_sign_up_value/?field_name=${fieldName}&field_value=${fieldValue}`);
      const data = await response.json();

      if (data.exists) {

          // 'data.errors' is an object with the structure like { field_name: error_list (it is a string) }


          const errors = data.errors;
          // const fieldN = data.errors.field_name;
          // console.log(fieldN)



          for (const field_name in errors) {

              if (errors.hasOwnProperty(field_name)) {

                  const error_list = errors[field_name];
                  
                  //console.log("Field Name: " + field_name + "Error List: " + error_list);
                  
                  //getting the div element to display error
                  errorContainer = document.getElementById(fieldName + '-error')

                  //If error_list is an array, you can loop through its items
                  //checking if any element in list is ''
                  arr = error_list.split(',').filter(item => item !== '');
                  

                  if (arr) {

                      for (let i = 0; i < arr.length; i++) {

                          const errorLine = document.createElement('p');
                          //console.log(error_list[i])
                          errorLine.textContent = arr[i]
                          errorLine.classList.add('text-danger','m-0', 'ml-5', 'mt-1');
                          errorContainer.appendChild(errorLine);
                          //console.log("Error " + (i + 1) + ": " + error_list[i]);
                      }
                  }
              }
          }





         
      } else {
          document.getElementById(fieldName + '-error').textContent = '';
      }
  }

//function to check if phone field contains any charecters
  function containsNonNumericChars(inputString) {
    //console.log(inputString)
    const result = parseInt(inputString)
    console.log(typeof result,result)
    return isNaN(result);  //return result=== Nan won't work nan special type 
  }

  const password2 =document.getElementById('id_password2')
const password =document.getElementById('id_password')
const username =document.getElementById('id_username')



//passwords comparing

function passwordCompare(){
  console.log('comparing passwords')
  if ((password) && (password2)){

    if ( password2.value !== '' && password.value !== password2.value ){
  
      errorContainer = document.getElementById('password21-error')
      console.log('password and password2 comparing')
      const errorLine = document.createElement('p');
      //console.log(error_list[i])
      errorLine.textContent = "Password's didn't match"
      //console.log(errorLine.value)
      errorLine.classList.add('text-danger','m-0', 'ml-5', 'mt-1','never-erase');
      console.log(errorLine,errorContainer)
      errorContainer.appendChild(errorLine);
      
  
  
    }
  
  }
}





//console.log('passoword2 field ',password2)


//function checks the username and password value
function passwordUsernameCheck(){
  
  console.log('Username field ',username.value)
  console.log('password field ',password.value)
  if (username && password && username.value != ''){

    if (password.value.includes(username.value)){

     errorContainer = document.getElementById('password-2-error')
   //console.log('username and password are comparing','  ',password.value,' ',username.value,'getting the  error div ',errorContainer)
   const errorLine = document.createElement('p');
   //console.log(error_list[i])
   //console.log(errorLine)
   errorLine.textContent = "Password simillar to username"
   //alert('password simillar to usernaem')
   errorLine.classList.add('text-danger','m-0', 'ml-5', 'mt-1');
   errorContainer.appendChild(errorLine);
   //check password contain any number
   var digitPattern = /\d/;

  // Use the test method of the regular expression to check if the inputString contains a digit
  if (! (digitPattern.test(password.value))){
    errorContainer = document.getElementById('password-3-error')
    const errorLine = document.createElement('p');
    errorLine.textContent = "Password want to contain a number "
    errorLine.classList.add('text-danger','m-0', 'ml-5', 'mt-1');
    errorContainer.appendChild(errorLine);
  }


   
   console.log(errorLine,errorContainer)
   //console.log('error container :',errorContainer)
    }
 }
}



  // Event listeners for each input field
  //id of input ta
  id_username=document.getElementById('id_username')
  if (id_username){
    id_username.addEventListener('blur', function () {

      //clear the div element again focusing on input element
      
      clear_div('#username')

      //check the value 
      checkExists('username', this.value); //this.value or document.getElementById('id_username').value
  });
  }
 

  id_email=document.getElementById('id_email')
  if(  id_email){
    document.getElementById('id_email').addEventListener('blur', function () {
      clear_div('#email')
      checkExists('email', document.getElementById('id_email').value);
  });
  }

if(  document.getElementById('id_phone')){

  document.getElementById('id_phone').addEventListener('blur', function () {
    clear_div('#phone')
    document.getElementById('phone1-error').textContent=''
    checkExists('phone', document.getElementById('id_phone').value);
    containsNonNumericChars(document.getElementById('id_phone').value)
    const digits_check = containsNonNumericChars(phone.value)
      //console.log(digits_check)

      if (digits_check){

        errorContainer = document.getElementById('phone1-error')
          console.log('password and password2 comparing')
          const errorLine = document.createElement('p');
          //console.log(error_list[i])
          errorLine.textContent = "Phone number want to be numbers"
          errorLine.classList.add('text-danger','m-0', 'ml-5', 'mt-1');
          errorContainer.appendChild(errorLine);

      }

});
}
if(document.getElementById('id_password')){
  document.getElementById('id_password').addEventListener('blur', function () {
    document.getElementById('password-2-error').textContent=''
    document.getElementById('password-3-error').textContent=''
    clear_div('#password')
    checkExists('password', document.getElementById('id_password').value);
    passwordUsernameCheck()
    
  });
}
  if(document.getElementById('id_password2')){
    document.getElementById('id_password2').addEventListener('blur', function () {
      document.getElementById('password21-error').textContent=''
      clear_div('#password2')
      checkExists('password2', document.getElementById('id_password2').value);
      passwordCompare()
    });
  }
  


});

}


====================================================add to cart ================================================================

variant qty  

//show product qty and increment decrement management


if (window.location.pathname.startsWith('/product/')){
const minusIcon = document.getElementById("minus_icon");
const plusIcon = document.getElementById("plus_icon");
const qtyInput = document.getElementById("show_qty");
const maxStock = parseInt(qtyInput.getAttribute("max_stock"));


 // Event listener for the minus icon
 minusIcon.addEventListener("click", function () {
  let currentValue = parseInt(qtyInput.value);
  if (!isNaN(currentValue) && currentValue > 1) {
      qtyInput.value = (currentValue - 1).toString();
      showNotification(`Number of stocks removed: ${currentValue - 1}`, 'text-danger');
      
  }
});

 // Event listener for the plus icon
 plusIcon.addEventListener("click", function () {
  let currentValue = parseInt(qtyInput.value);
  if (!isNaN(currentValue) && currentValue < maxStock) {
      qtyInput.value = (currentValue + 1).toString();
      showNotification(`Number of stocks : ${currentValue + 1}`, 'text-success');
        }
    });


   
}

================================================================================================wishlist=================================================


from django.db import models
from django.contrib.auth.models import AbstractUser
import hashlib
from products.models import Variant


#custom user model with phone field

class CustomUser(AbstractUser):

    phone = models.CharField(max_length=10,unique=True)


    # Add related_name arguments to avoid reverse accessor clash
    groups = models.ManyToManyField(
        'auth.Group',
        related_name='custom_users',
        blank=True,
    )
    user_permissions = models.ManyToManyField(
        'auth.Permission',
        related_name='custom_users',
        blank=True,
    )

    def __str__(self):
        return self.username
    def make_password(self, raw_password):
        
        #hashing logic
        
        salt = 'abcdefghijk'  # Add a unique salt value

        hashed_password = hashlib.sha256((salt + raw_password).encode()).hexdigest()
        print('hashed')
        return hashed_password
    
#checking password when loging 
#the input password will be hashed and checked with the user object password hashed value

    def check_password(self, raw_password):
        hashed_input_password = self.make_password(raw_password)
        print('checking hashed password')
        return self.password == hashed_input_password
    
    
    

''' 
After this now we have to set in settings that our CustomUser want to be used as
the User model in our django project . So now go to settings.py and add
AUTH_USER_MODEL = 'user.CustomUser'

'''



class ShippingAddress(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE, related_name="address",null=True,blank=True)
    address = models.CharField(max_length=100,null=True,blank=True)
    city = models.CharField(max_length=50,null=True,blank=True)
    state = models.CharField(max_length=50,null=True,blank=True)
    zip_code = models.CharField(max_length=50,null=True,blank=True)
    country = models.CharField(max_length=50, default='India',blank=True)
    default_address = models.BooleanField(default=False)

    def __str__(self):
        return self.user.username+""+self.address


    class Meta:
        verbose_name_plural = "Shipping Address"






class Wishlist(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE, related_name="wishlist",null=True,blank=True)
    variant = models.ForeignKey(Variant,on_delete=models.CASCADE,related_name='variant')

    def __str__(self):
        return self.user.username+""+self.address


    class Meta:
        verbose_name_plural = "Wishlist"